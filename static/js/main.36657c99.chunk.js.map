{"version":3,"sources":["components/TodoItem.jsx","components/TodoContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","itemID","todoObject","id","name","onClick","deleteToDo","TodoContainer","state","todoList","currentItemName","handleChange","event","setState","target","value","validateName","undefined","displayTodos","map","todoItem","key","getAttribute","filteredArr","filter","todo","addNewTodo","preventDefault","newTodoObject","create_UUID","todoListArr","push","onSubmit","this","onChange","Component","dt","Date","getTime","replace","c","r","Math","random","floor","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAceA,G,YAVE,SAACC,GAChB,OACE,yBAAKC,UAAU,YAAYC,OAAQF,EAAMG,WAAWC,IAClD,0BAAMH,UAAU,OAAOC,OAAQF,EAAMG,WAAWC,IAAKJ,EAAMG,WAAWE,MACtE,0BAAMJ,UAAU,WAAWC,OAAQF,EAAMG,WAAWC,IAAI,uBAAGH,UAAU,kBACrE,0BAAMA,UAAU,aAAaC,OAAQF,EAAMG,WAAWC,GAAIE,QAASN,EAAMO,YAAY,uBAAGN,UAAU,oBCuFzFO,G,kNA3FXC,MAAQ,CACJC,SAAU,CACN,CAAEN,GAAI,IAAKC,KAAM,aACjB,CAAED,GAAI,IAAKC,KAAM,gCAErBM,gBAAiB,I,EAGrBC,aAAe,SAACC,GAEZ,EAAKC,SAAS,CACVH,gBAAiBE,EAAME,OAAOC,S,EAItCC,aAAe,SAACZ,GAEZ,QAAkB,KAATA,GAAwB,OAATA,QAA0Ba,IAATb,I,EAG7Cc,aAAe,WAGX,OADkB,EAAKV,MAAMC,SACVU,KAAI,SAAAC,GACnB,OACI,kBAAC,EAAD,CAAUlB,WAAYkB,EAAUC,IAAKD,EAASjB,GAAIG,WAAY,EAAKA,iB,EAK/EA,WAAa,SAACM,GAEV,IAGIX,EAHiBW,EAAME,OAGCQ,aAAa,UAIrCC,EADc,EAAKf,MAAMC,SACCe,QAAO,SAAAC,GACjC,OAAOA,EAAKtB,KAAOF,KAIvB,EAAKY,SAAS,CACVJ,SAAUc,K,EAIlBG,WAAa,SAACd,GAEVA,EAAMe,iBAGN,IAAIC,EAAgB,GACpBA,EAAcxB,KAAO,EAAKI,MAAME,gBAChCkB,EAAczB,GAAK0B,IAGnB,IAAIC,EAAc,EAAKtB,MAAMC,SAC7BqB,EAAYC,KAAKH,GACjB,EAAKf,SAAS,CACVJ,SAAUqB,IAId,EAAKjB,SAAS,CACVH,gBAAiB,M,uDAMrB,OACI,yBAAKV,UAAU,2BACX,0BAAMgC,SAAUC,KAAKP,YACjB,2BACIQ,SAAUD,KAAKtB,aACfI,MAAOkB,KAAKzB,MAAME,gBAClBV,UAAU,kBAEd,6CAEJ,yBAAKA,UAAU,kBACViC,KAAKf,qB,GArFEiB,cA+F5B,SAASN,IACL,IAAIO,GAAK,IAAIC,MAAOC,UAMpB,MALW,uCAAuCC,QAAQ,SAAS,SAAUC,GACzE,IAAIC,GAAKL,EAAqB,GAAhBM,KAAKC,UAAiB,GAAK,EAEzC,OADAP,EAAKM,KAAKE,MAAMR,EAAK,KACP,MAANI,EAAYC,EAAU,EAAJA,EAAW,GAAMI,SAAS,O,UCzF7CC,E,uKATX,OACE,yBAAK9C,UAAU,OACb,0CACA,kBAAC,EAAD,W,GALUmC,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36657c99.chunk.js","sourcesContent":["import React from \"react\";\nimport '../styles/TodoItem.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nconst TodoItem = (props) => {\n  return (\n    <div className=\"todo-item\" itemID={props.todoObject.id}>\n      <span className=\"name\" itemID={props.todoObject.id}>{props.todoObject.name}</span>\n      <span className=\"editIcon\" itemID={props.todoObject.id}><i className=\"fa fa-pencil\"></i></span>\n      <span className=\"deleteIcon\" itemID={props.todoObject.id} onClick={props.deleteToDo}><i className=\"fa fa-trash\"></i></span>\n    </div>\n  )\n};\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem'\nimport '../styles/TodoContainer.min.css'\n\nclass TodoContainer extends Component {\n    state = {\n        todoList: [\n            { id: \"1\", name: \"Go to UOH\" },\n            { id: \"2\", name: \"Roam around with my friends\" },\n        ],\n        currentItemName: \"\",\n    }\n\n    handleChange = (event) => {\n        // Set the current item name in the state same as the form input\n        this.setState({\n            currentItemName: event.target.value,\n        });\n    };\n\n    validateName = (name) => {\n        // Make sure that the name is valid\n        return !(name === \"\" || name === null || name === undefined)\n    }\n\n    displayTodos = () => {\n        // Self explanatory\n        let todoListArr = this.state.todoList\n        return todoListArr.map(todoItem => {\n            return (\n                <TodoItem todoObject={todoItem} key={todoItem.id} deleteToDo={this.deleteToDo} />\n            )\n        })\n    }\n\n    deleteToDo = (event) => {\n        // Get the clicked element\n        let clickedElement = event.target\n\n        // Get the element's ID\n        let itemID = clickedElement.getAttribute('itemid')\n\n        // Remove the element from state which matches this ID\n        let todoListArr = this.state.todoList\n        let filteredArr = todoListArr.filter(todo => {\n            return todo.id !== itemID\n        })\n\n        // Set state back to the filtered arr so that it renders new items again\n        this.setState({\n            todoList: filteredArr\n        })\n    }\n\n    addNewTodo = (event) => {\n        // Prevent the form from submitting\n        event.preventDefault();\n\n        // Create a new todo item object\n        let newTodoObject = {}\n        newTodoObject.name = this.state.currentItemName\n        newTodoObject.id = create_UUID()\n\n        // Add this item to the list stored in state\n        let todoListArr = this.state.todoList\n        todoListArr.push(newTodoObject)\n        this.setState({\n            todoList: todoListArr\n        })\n\n        // Set the current item name in state to \"\" so that it clear the form input\n        this.setState({\n            currentItemName: \"\"\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"todo-form-and-container\">\n                <form onSubmit={this.addNewTodo}>\n                    <input\n                        onChange={this.handleChange}\n                        value={this.state.currentItemName}\n                        className=\"new-todo-name\"\n                    />\n                    <button>Add Todo</button>\n                </form>\n                <div className=\"todo-container\">\n                    {this.displayTodos()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoContainer;\n\n// Shamelessly copied from online\nfunction create_UUID() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c === 'x' ? r : ((r & 0x3) | 0x8)).toString(16);\n    });\n    return uuid;\n}","import React, { Component } from \"react\";\nimport TodoContainer from \"./components/TodoContainer\";\nimport './styles/App.min.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <h3>To Do List</h3>\n        <TodoContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}